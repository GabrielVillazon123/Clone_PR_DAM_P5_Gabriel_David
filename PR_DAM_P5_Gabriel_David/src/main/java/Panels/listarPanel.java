/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Panels;

import com.mycompany.pr_dam_p5_gabriel_david.*;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 * @author David López Corella
 * @author Jesús Gabriel Pollos Villazón
 */
public class listarPanel extends javax.swing.JPanel {

    /**
     * Creates new form altaPanel
     */
    public listarPanel() {
        initComponents();
        cargarAnimales();

        listarMetodoComboBox.setSelectedIndex(-1);
        listarAnimalComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listarTitle = new javax.swing.JLabel();
        animalTxt = new javax.swing.JLabel();
        listarAnimalComboBox = new javax.swing.JComboBox<>();
        listarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaList = new javax.swing.JTable();
        listarMetodoComboBox = new javax.swing.JComboBox<>();
        metodoTxt = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(860, 500));
        setPreferredSize(new java.awt.Dimension(860, 500));

        listarTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        listarTitle.setForeground(new java.awt.Color(51, 153, 255));
        listarTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listarTitle.setText("Listar");

        animalTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        animalTxt.setForeground(new java.awt.Color(51, 153, 255));
        animalTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        animalTxt.setText("Animal");
        animalTxt.setEnabled(false);
        animalTxt.setPreferredSize(new java.awt.Dimension(90, 30));

        listarAnimalComboBox.setBackground(new java.awt.Color(232, 232, 232));
        listarAnimalComboBox.setBorder(null);
        listarAnimalComboBox.setEnabled(false);

        listarBtn.setBackground(new java.awt.Color(0, 102, 255));
        listarBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        listarBtn.setForeground(new java.awt.Color(255, 255, 255));
        listarBtn.setText("LISTAR");
        listarBtn.setBorder(null);
        listarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarBtnActionPerformed(evt);
            }
        });

        tablaList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaList.setMaximumSize(new java.awt.Dimension(848, 409));
        tablaList.setMinimumSize(new java.awt.Dimension(848, 409));
        jScrollPane1.setViewportView(tablaList);

        listarMetodoComboBox.setBackground(new java.awt.Color(232, 232, 232));
        listarMetodoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ave", "Mamifero", "Reptil", "Todos", "Liberados", "Fallecidos", "Tratamientos" }));
        listarMetodoComboBox.setBorder(null);
        listarMetodoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarMetodoComboBoxActionPerformed(evt);
            }
        });

        metodoTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        metodoTxt.setForeground(new java.awt.Color(51, 153, 255));
        metodoTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        metodoTxt.setText("Modo de listar");
        metodoTxt.setPreferredSize(new java.awt.Dimension(90, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listarTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(metodoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(animalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listarAnimalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(listarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(65, 65, 65))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(169, 169, 169)
                    .addComponent(listarMetodoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(489, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(listarTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listarAnimalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(animalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(metodoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listarBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                .addGap(7, 7, 7))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addComponent(listarMetodoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(411, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarBtnActionPerformed
        int indiceMetodo = listarMetodoComboBox.getSelectedIndex();
        int indiceAnimal = listarAnimalComboBox.getSelectedIndex();

        if (indiceMetodo != 6) {
            DefaultTableModel modelListarPorAnimal;

            // https://coderanch.com/t/488016/java/JTable-set-column-data-type ?????
            // https://stackoverflow.com/questions/1990817/how-to-make-a-jtable-non-editable ??????????????
            modelListarPorAnimal = new DefaultTableModel() {
                Class[] types = new Class[]{
                    String.class, // Nombre
                    String.class, // Raza
                    String.class, // Tipo de Lesion
                    String.class, // Gravedad
                    Double.class, // Peso
                    Object.class, // Fecha de Entrada
                    String.class, // Especie
                    Boolean.class // Motivo Especial
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            modelListarPorAnimal.setColumnIdentifiers(new Object[]{"Nombre", "Raza", "Tipo de Lesion", "Gravedad", "Peso", "Fecha de Entrada", "Especie", "Motivo Especial"});
            tablaList.setModel(modelListarPorAnimal);

            // Si entiendo que hacer ^^ y vv es un poco tonto pero ya lo tenia asi y estaba demasiado cansado para cambiar lo
            DefaultTableModel model = (DefaultTableModel) tablaList.getModel();
            // Quita los valores viejos
            model.setRowCount(0);
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            try {
                switch (indiceMetodo) {
                    case 0: // Ave
                        for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
                            if (animal instanceof Ave) {
                                Ave ave = (Ave) animal;
                                String fechaFormateada = formatoFecha.format(ave.getFechaEntrada());
                                model.addRow(new Object[]{
                                    ave.getNombreAnimal(),
                                    ave.getRaza(),
                                    ave.getTipoLesion(),
                                    ave.getGravedad(),
                                    ave.getPeso(),
                                    fechaFormateada,
                                    ave.getClass().getSimpleName(),
                                    ave.getMotivo()
                                });
                            }
                        }
                        break;
                    case 1: // Mamifero
                        for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
                            if (animal instanceof Mamifero) {
                                Mamifero mamifero = (Mamifero) animal;
                                String fechaFormateada = formatoFecha.format(mamifero.getFechaEntrada());
                                model.addRow(new Object[]{
                                    mamifero.getNombreAnimal(),
                                    mamifero.getRaza(),
                                    mamifero.getTipoLesion(),
                                    mamifero.getGravedad(),
                                    mamifero.getPeso(),
                                    fechaFormateada,
                                    mamifero.getClass().getSimpleName(),
                                    mamifero.getMotivo()
                                });
                            }
                        }
                        break;
                    case 2: // Reptil
                        for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
                            if (animal instanceof Reptil) {
                                Reptil reptil = (Reptil) animal;
                                String fechaFormateada = formatoFecha.format(reptil.getFechaEntrada());
                                model.addRow(new Object[]{
                                    reptil.getNombreAnimal(),
                                    reptil.getRaza(),
                                    reptil.getTipoLesion(),
                                    reptil.getGravedad(),
                                    reptil.getPeso(),
                                    fechaFormateada,
                                    reptil.getClass().getSimpleName(),
                                    reptil.getMotivo()
                                });
                            }
                        }
                        break;
                    case 3: // Todos
                        for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
                            String fechaFormateada = formatoFecha.format(animal.getFechaEntrada());
                            model.addRow(new Object[]{
                                animal.getNombreAnimal(),
                                animal.getRaza(),
                                animal.getTipoLesion(),
                                animal.getGravedad(),
                                animal.getPeso(),
                                fechaFormateada,
                                animal.getClass().getSimpleName(),
                                animal.getMotivo()
                            });
                        }
                        break;
                    case 4: // Liberados
                        for (Liberacion animal : CentroRecuperacionFauna.getLiberaciones()) {
                            String fechaFormateada = formatoFecha.format(animal.getPaciente().getFechaEntrada());
                            model.addRow(new Object[]{
                                animal.getPaciente().getNombreAnimal(),
                                animal.getPaciente().getRaza(),
                                animal.getPaciente().getTipoLesion(),
                                animal.getPaciente().getGravedad(),
                                animal.getPaciente().getPeso(),
                                fechaFormateada,
                                animal.getPaciente().getClass().getSimpleName(),
                                animal.getPaciente().getMotivo()
                            });
                        }
                        break;
                    case 5: // Muertos
                        for (Baja animal : CentroRecuperacionFauna.getBajas()) {
                            String fechaFormateada = formatoFecha.format(animal.getPaciente().getFechaEntrada());
                            model.addRow(new Object[]{
                                animal.getPaciente().getNombreAnimal(),
                                animal.getPaciente().getRaza(),
                                animal.getPaciente().getTipoLesion(),
                                animal.getPaciente().getGravedad(),
                                animal.getPaciente().getPeso(),
                                fechaFormateada,
                                animal.getPaciente().getClass().getSimpleName(),
                                animal.getPaciente().getMotivo()
                            });
                        }
                        break;
                }
                tablaList.setModel(model);
            } catch (Exception ex) {
                // System.out.println(ex.getMessage());
                ex.printStackTrace();
            }
        } else {
            DefaultTableModel modelListarPorTratamiento;

            // https://coderanch.com/t/488016/java/JTable-set-column-data-type ?????
            // https://stackoverflow.com/questions/1990817/how-to-make-a-jtable-non-editable ??????????????
            modelListarPorTratamiento = new DefaultTableModel() {
                Class[] types = new Class[]{
                    String.class, // Nombre
                    String.class, // Raza
                    String.class, // Tratamiento
                    String.class, // Fecha Formateada
                    String.class, // Veterinario
                    String.class, // Especialidad
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            tablaList.setModel(modelListarPorTratamiento);
            DefaultTableModel model = (DefaultTableModel) tablaList.getModel();
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");

            modelListarPorTratamiento.setColumnIdentifiers(new Object[]{"Nombre", "Raza", "Tratamiento", "Fecha Tratamiento", "Veterinario", "Especialidad"});

            if (indiceAnimal == 0) {
                for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
                    for (int i = 0; i < animal.getTratamientos().size(); i++) {
                        Tratamiento tratamiento = animal.getTratamientos().get(i);
                        Veterinario veterinario = tratamiento.getVeterinario();
                        String fechaFormateadaTratamiento = formatoFecha.format(tratamiento.getFechaTratamiento());
                        model.addRow(new Object[]{
                            animal.getNombreAnimal(),
                            animal.getRaza(),
                            tratamiento.getNombreTratamiento(),
                            fechaFormateadaTratamiento,
                            veterinario.getNombre(),
                            veterinario.getEspecialidad(),});
                    }
                }
            } else {
                // -1 porque "Todos" es el primero
                Animal animal = CentroRecuperacionFauna.getAnimales().get(indiceAnimal - 1);
                for (int i = 0; i < animal.getTratamientos().size(); i++) {
                    Tratamiento tratamiento = animal.getTratamientos().get(i);
                    Veterinario veterinario = tratamiento.getVeterinario();
                    String fechaFormateadaTratamiento = formatoFecha.format(tratamiento.getFechaTratamiento());
                    model.addRow(new Object[]{
                        animal.getNombreAnimal(),
                        animal.getRaza(),
                        tratamiento.getNombreTratamiento(),
                        fechaFormateadaTratamiento,
                        veterinario.getNombre(),
                        veterinario.getEspecialidad(),});
                }
            }
            tablaList.setModel(modelListarPorTratamiento);
        }
    }//GEN-LAST:event_listarBtnActionPerformed

    private void listarMetodoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarMetodoComboBoxActionPerformed
        if (listarMetodoComboBox.getSelectedIndex() == 6) {
            listarAnimalComboBox.setEnabled(true);
            listarAnimalComboBox.setSelectedIndex(0);
            animalTxt.setEnabled(true);
        } else {
            listarAnimalComboBox.setEnabled(false);
            listarAnimalComboBox.setSelectedIndex(-1);
            animalTxt.setEnabled(false);
        }
    }//GEN-LAST:event_listarMetodoComboBoxActionPerformed

    private void cargarAnimales() {
        // Animal
        Vector animalComboBoxItems = new Vector();

        animalComboBoxItems.add("Todos");

        for (Animal animal : CentroRecuperacionFauna.getAnimales()) {
            animalComboBoxItems.add(animal.getNombreAnimal() + " (" + animal.getRaza() + ")");
        }

        final DefaultComboBoxModel animalModel = new DefaultComboBoxModel(animalComboBoxItems);
        listarAnimalComboBox.setModel(animalModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel animalTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listarAnimalComboBox;
    private javax.swing.JButton listarBtn;
    private javax.swing.JComboBox<String> listarMetodoComboBox;
    private javax.swing.JLabel listarTitle;
    private javax.swing.JLabel metodoTxt;
    private javax.swing.JTable tablaList;
    // End of variables declaration//GEN-END:variables
}
